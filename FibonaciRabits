#Fibonaci Rabbits

#A recurrence relation is a way of defining the terms of a sequence with respect to the values of previous terms.
# In the case of Fibonacci's rabbits from the introduction, any given month will contain the rabbits that were alive
# the previous month, plus any new offspring. A key observation is that the number of offspring in any month is equal
# to the number of rabbits that were alive two months prior. As a result, if Fn represents the number of rabbit pairs
# alive after the n-th month, then we obtain the Fibonacci sequence having terms Fn that are defined by the recurrence
# relation Fn=Fn−1+Fn−2 (with F1=F2=1 to initiate the sequence). Although the sequence bears Fibonacci's name, it was
# known to Indian mathematicians over two millennia ago.

#When finding the n-th term of a sequence defined by a recurrence relation, we can simply use the recurrence relation
# to generate terms for progressively larger values of n. This problem introduces us to the computational technique of
# dynamic programming, which successively builds up solutions by using the answers to smaller cases.

#Given: Positive integers n≤40 and k≤5.

#Return: The total number of rabbit pairs that will be present after n months, if we begin with 1 pair and in each
# generation, every pair of reproduction-age rabbits produces a litter of k rabbit pairs (instead of only 1 pair).

#The total pairs of rabbit at any given month is the sum of rabbits from the previous generation
# and their offspring.
# Any pair of rabbits that were alive two generations ago will reproduce and
# make "k" rabbit babies.
# Furthermore, these pairs are the only source new rabbits for this generation.
# Since any pair of rabbits alive in the previous generation are still alive this generation, we get the
# recurrence Fn=Fn−1+k*Fn−2.

def fibonaciNumbers(n,k):
    if n > 2:
        fibnum = [0,1]
        for i in range(2, n+1):
            fibnum.append(fibnum[-1] + fibnum[-2]*k)
    else:
        return 1
    return fibnum

fn = fibonaciNumbers(35,2)
print(fn)
