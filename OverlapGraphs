# Given: A collection of DNA strings in FASTA format having total length at most 10 kbp.
# Return: The adjacency list corresponding to O3. You may return edges in any order.
# k = 3 , overlap by 3 letters

fhandle = open(r"C:\Users\kianmun.SWISING\Desktop\dna.txt")
file = fhandle.read().split('\n')
filejoin = ''.join(file)

import re
sequence_names = re.findall(r'>Rosalind_\d{4}',filejoin)
sequence = re.split(r'>Rosalind_\d{4}', filejoin)[1::1]

seq_dict = dict(zip(sequence_names, sequence))

def k_overlap(seq1, seq2, k):
    return seq1[-k:] == seq2[:k]


import itertools


def dna_overlap(data, k):
    edges = []
    for a, b in itertools.combinations(data, 2):
        a_seq, b_seq = data[a], data[b]
        if k_overlap(a_seq, b_seq, k):
            edges.append((a, b))
        #if k_overlap(a_seq, b_seq, k):
        #    edges.append((b, a))
    return edges

overlap = str(dna_overlap(seq_dict, 3))
print(overlap)
overlap_pairs = re.findall(r'Rosalind_\d{4}',overlap)
#overlap_pairs = overlap_duplicates[0::2]
#print(overlap_pairs)
for i in range(0,len(overlap_pairs),2):
    pairs = overlap_pairs[i] + ' ' + overlap_pairs[i+1]
    print(pairs)

